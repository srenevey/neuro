(function() {var implementors = {};
implementors["neuro"] = [{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"neuro/activations/enum.Activation.html\" title=\"enum neuro::activations::Activation\">Activation</a>",synthetic:false,types:["neuro::activations::Activation"]},{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"neuro/data/enum.DataSetError.html\" title=\"enum neuro::data::DataSetError\">DataSetError</a>",synthetic:false,types:["neuro::data::DataSetError"]},{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"neuro/data/enum.Scaling.html\" title=\"enum neuro::data::Scaling\">Scaling</a>",synthetic:false,types:["neuro::data::Scaling"]},{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"neuro/initializers/enum.Initializer.html\" title=\"enum neuro::initializers::Initializer\">Initializer</a>",synthetic:false,types:["neuro::initializers::Initializer"]},{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"neuro/layers/enum.Padding.html\" title=\"enum neuro::layers::Padding\">Padding</a>",synthetic:false,types:["neuro::layers::conv2d::Padding"]},{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"neuro/losses/struct.BinaryCrossEntropy.html\" title=\"struct neuro::losses::BinaryCrossEntropy\">BinaryCrossEntropy</a>",synthetic:false,types:["neuro::losses::BinaryCrossEntropy"]},{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"neuro/losses/struct.CrossEntropy.html\" title=\"struct neuro::losses::CrossEntropy\">CrossEntropy</a>",synthetic:false,types:["neuro::losses::CrossEntropy"]},{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"neuro/losses/struct.MeanAbsoluteError.html\" title=\"struct neuro::losses::MeanAbsoluteError\">MeanAbsoluteError</a>",synthetic:false,types:["neuro::losses::MeanAbsoluteError"]},{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"neuro/losses/struct.MeanSquaredError.html\" title=\"struct neuro::losses::MeanSquaredError\">MeanSquaredError</a>",synthetic:false,types:["neuro::losses::MeanSquaredError"]},{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"neuro/losses/struct.SoftmaxCrossEntropy.html\" title=\"struct neuro::losses::SoftmaxCrossEntropy\">SoftmaxCrossEntropy</a>",synthetic:false,types:["neuro::losses::SoftmaxCrossEntropy"]},{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"neuro/metrics/enum.Metrics.html\" title=\"enum neuro::metrics::Metrics\">Metrics</a>",synthetic:false,types:["neuro::metrics::Metrics"]},{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"neuro/regularizers/enum.Regularizer.html\" title=\"enum neuro::regularizers::Regularizer\">Regularizer</a>",synthetic:false,types:["neuro::regularizers::Regularizer"]},];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        })()
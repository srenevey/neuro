(function() {var implementors = {};
implementors["neuro"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"neuro/data/struct.ImageDataSet.html\" title=\"struct neuro::data::ImageDataSet\">ImageDataSet</a>","synthetic":false,"types":["neuro::data::image_data::ImageDataSet"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"neuro/data/struct.TabularDataSet.html\" title=\"struct neuro::data::TabularDataSet\">TabularDataSet</a>","synthetic":false,"types":["neuro::data::tabular_data::TabularDataSet"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"enum\" href=\"neuro/data/enum.DataSetError.html\" title=\"enum neuro::data::DataSetError\">DataSetError</a>","synthetic":false,"types":["neuro::data::DataSetError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"enum\" href=\"neuro/errors/enum.Error.html\" title=\"enum neuro::errors::Error\">Error</a>","synthetic":false,"types":["neuro::errors::Error"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"neuro/layers/struct.BatchNorm.html\" title=\"struct neuro::layers::BatchNorm\">BatchNorm</a>","synthetic":false,"types":["neuro::layers::batch_normalization::BatchNorm"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"neuro/layers/struct.Conv2D.html\" title=\"struct neuro::layers::Conv2D\">Conv2D</a>","synthetic":false,"types":["neuro::layers::conv2d::Conv2D"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"neuro/layers/struct.Dense.html\" title=\"struct neuro::layers::Dense\">Dense</a>","synthetic":false,"types":["neuro::layers::dense::Dense"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"neuro/layers/struct.Dropout.html\" title=\"struct neuro::layers::Dropout\">Dropout</a>","synthetic":false,"types":["neuro::layers::dropout::Dropout"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"neuro/layers/struct.Flatten.html\" title=\"struct neuro::layers::Flatten\">Flatten</a>","synthetic":false,"types":["neuro::layers::flatten::Flatten"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"neuro/layers/struct.MaxPool2D.html\" title=\"struct neuro::layers::MaxPool2D\">MaxPool2D</a>","synthetic":false,"types":["neuro::layers::max_pooling::MaxPool2D"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"neuro/models/struct.Network.html\" title=\"struct neuro::models::Network\">Network</a>","synthetic":false,"types":["neuro::models::Network"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"enum\" href=\"neuro/regularizers/enum.Regularizer.html\" title=\"enum neuro::regularizers::Regularizer\">Regularizer</a>","synthetic":false,"types":["neuro::regularizers::Regularizer"]}];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        })()
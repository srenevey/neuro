var N=null,E="",T="t",U="u",searchIndex={};
var R=["array","activation","dense","neuro::layers","batchnormalization","with_param","conv2d","convmode","initializer","maxpooling2d","neuro::data","dataseterror","tabulardataset","imagedataset","print_stats","output_shape","neuro::activations","neuro::layers::dense","try_from","result","try_into","borrow_mut","neuro::layers::batch_normalization","type_id","neuro::layers::conv2d","borrow","typeid","neuro::layers::max_pooling","neuro::layers::initializers","neuro::models","neuro::losses","neuro::optimizers","neuro::data::batch_iterator","neuro::data::tabular_data","neuro::data::image_data","initialize_parameters","compute_activation","compute_activation_mut","compute_dactivation_mut","parameters","dparameters","set_parameters","update_parameters","initialize_opt_params","input_shape","num_train_samples","shuffle","x_train","y_train","x_valid","y_valid","formatter","Activation","BatchNormalization","ConvMode","MaxPooling2D","Initializer","Optimizer","DataSetError","BatchIterator","TabularDataSet","ImageDataSet","dropout","MeanAbsoluteError","MeanSquaredError","option","neuro::layers::dropout","to_owned","clone_into","neuro::metrics","x_train_stats","y_train_stats","num_batches","initialize_batches","padding","Dropout","Create a new Stochastic Gradient Descent optimizer","Initialize the parameters with values drawn from a random…","tensor","regularizer","bufwriter","to_string","string","neuro::regularizers","neuro::tensor","parameters_mut","set_regularizer","update_time_step","new_empty_tensor","batch_size","shuffle_mut","scaled_uniform","scaled_normal","reduction","flatten_mut","reshape_mut","print_tensor","Regularizer","Reduction","TensorTrait","BinaryCrossEntropy","CrossEntropy","SoftmaxCrossEntropy","Returns a reference to the type of scaling that has been…","primitivetype","num_valid_samples","get_scalar","neuro::initializers","Creates a 2D convolution layer with the given parameters.","neuroerror","neuro::errors","adadelta","NeuroError","AdaDelta"];
searchIndex["neuro"]={"doc":"Neuro","i":[[0,"activations","neuro","Activation functions.",N,N],[4,R[52],R[16],"Enumeration of the activation functions.",N,N],[13,"LeakyReLU",E,E,0,N],[13,"Linear",E,E,0,N],[13,"ReLU",E,E,0,N],[13,"Sigmoid",E,E,0,N],[13,"Softmax",E,E,0,N],[13,"Tanh",E,E,0,N],[11,"eval",E,E,0,[[["self"],[R[78]]],[R[78]]]],[0,"data","neuro","Simple interfaces to import data.",N,N],[3,R[59],R[10],E,N,N],[3,R[61],E,"Structure representing a collection of images.",N,N],[3,R[60],E,"Structure representing tabular data.",N,N],[4,R[58],E,"Errors that may be raised by data sets methods.",N,N],[13,"Io",E,E,1,N],[13,"Csv",E,E,1,N],[13,"DimensionMismatch",E,E,1,N],[13,"PathDoesNotExist",E,E,1,N],[13,"TrainPathDoesNotExist",E,E,1,N],[13,"ValidPathDoesNotExist",E,E,1,N],[13,"ImageFormatNotSupported",E,E,1,N],[13,"InvalidValidationFraction",E,E,1,N],[13,"DifferentNumbersOfChannels",E,E,1,N],[4,"Scaling",E,"Defines the type of scaling that has been performed.",N,N],[13,"Normalized",E,E,2,N],[13,"Standarized",E,E,2,N],[11,"new",E,"Creates a batch iterator of given size for the two Tensors.",3,[[["u64"]],["batchiterator"]]],[11,"from_path",E,"Constructs an ImageDataSet from a path.",4,[[["u32"],["f64"],["path"]],[[R[19],[R[13],R[109]]],[R[13]],[R[109]]]]],[11,"print_classes",E,"Prints the classes in the dataset.",4,[[["self"]]]],[11,"load_img",E,"Loads a single image from a path.",4,[[["self"],["path"]],[[R[109]],[R[78]],[R[19],[R[78],R[109]]]]]],[11,"load_img_vec",E,"Loads the images from the paths.",4,[[["self"]],[[R[109]],[R[78]],[R[19],[R[78],R[109]]]]]],[11,"from_csv",E,"Create a TabularDataSet from a set of csv files.",5,[[["bool"],["f64"],["path"]],[[R[19],[R[12],R[109]]],[R[12]],[R[109]]]]],[11,"from_tensor",E,"Creates a TabularDataSet from Tensors.",5,[[[R[78]],[R[65],[R[78]]]],[[R[19],[R[12],R[109]]],[R[12]],[R[109]]]]],[11,"normalize_input",E,"Normalizes the features of the training, validation, and…",5,[[["self"]]]],[11,"standarize_input",E,"Standarizes the features of the training, validation, and…",5,[[["self"]]]],[11,"normalize_output",E,"Normalizes the labels of the training, validation, and…",5,[[["self"]]]],[11,"standarize_output",E,"Standarizes the labels of the training, validation, and…",5,[[["self"]]]],[8,"DataSet",E,"Trait that must be implemented for any type of data set…",N,N],[10,R[44],E,"Returns the dimension of the samples.",6,[[["self"]],["dim4"]]],[10,R[15],E,"Returns the dimension of the labels.",6,[[["self"]],["dim4"]]],[10,R[45],E,"Returns the number of samples in the training set.",6,[[["self"]],["u64"]]],[10,R[105],E,"Returns the number of samples in the validation set.",6,[[["self"]],["u64"]]],[11,"classes",E,"Number of classes in the data set (if applicable).",6,[[["self"]],[["vec",[R[82]]],[R[65],["vec"]]]]],[10,R[47],E,"Returns a reference to the training samples.",6,[[["self"]],[R[78]]]],[10,R[48],E,"Returns a reference to the training labels.",6,[[["self"]],[R[78]]]],[10,R[49],E,"Returns a reference to the validation samples.",6,[[["self"]],[R[78]]]],[10,R[50],E,"Returns a reference to the validation labels.",6,[[["self"]],[R[78]]]],[10,"x_test",E,"Returns a reference to the test samples wrapped in an…",6,[[["self"]],[[R[65],[R[78]]],[R[78]]]]],[10,"y_test",E,"Returns a reference to the test labels wrapped in an Option.",6,[[["self"]],[[R[65],[R[78]]],[R[78]]]]],[10,R[70],E,R[103],6,[[["self"]],[R[65]]]],[10,R[71],E,R[103],6,[[["self"]],[R[65]]]],[0,"errors","neuro","Errors that may be returned by methods in the crate.",N,N],[4,R[112],R[110],E,N,N],[13,R[58],E,E,7,N],[13,"NoLayer",E,E,7,N],[0,"initializers","neuro","Parameters initialization methods.",N,N],[4,R[56],R[107],"Used to generate the initial values for the parameters of…",N,N],[13,"Constant",E,"Given constant value.",8,N],[13,"GlorotNormal",E,"Normal distribution scaled using Glorot scale factor.",8,N],[13,"GlorotUniform",E,"Uniform distribution scaled using Glorot scale factor.",8,N],[13,"HeNormal",E,"Normal distribution scaled using He scale factor.",8,N],[13,"HeUniform",E,"Uniform distribution scaled using He scale factor.",8,N],[13,"LecunNormal",E,"Normal distribution scaled using Lecun scale factor.",8,N],[13,"LecunUniform",E,"Uniform distribution scaled using Lecun scale factor.",8,N],[13,"Normal",E,"Normal distribution with mean 0 and standard deviation 0.01.",8,N],[13,"NormalScaled",E,"Normal distribution with mean 0 and given standard…",8,N],[13,"Ones",E,"Ones.",8,N],[13,"Uniform",E,"Uniform distribution within -0.01 and 0.01.",8,N],[13,"UniformBounded",E,"Uniform distribution within the given bounds.",8,N],[13,"Zeros",E,"Zeros.",8,N],[0,"layers","neuro","Collection of layers used to create neural networks.",N,N],[3,R[53],R[3],"Defines a batch normalization layer.",N,N],[3,"Conv2D",E,"Defines a 2D convolution layer.",N,N],[3,"Dense",E,"Defines a dense (or fully connected) layer.",N,N],[3,R[75],E,"Defines a dropout layer.",N,N],[3,R[55],E,"Defines a 2D max pooling layer.",N,N],[4,"Padding",E,"Defines the type of padding applied to the inputs.",N,N],[13,"Same",E,E,9,N],[13,"Valid",E,E,9,N],[11,"new",E,"Creates a batch normalization layer.",10,[[["bool"]],[[R[4]],["box",[R[4]]]]]],[11,R[5],E,"Creates a batch normalization layers with the given…",10,[[[R[104]],["bool"]],[[R[4]],["box",[R[4]]]]]],[11,"mean",E,E,10,[[["self"]],[R[78]]]],[11,"variance",E,E,10,[[["self"]],[R[78]]]],[11,"new",E,R[108],11,[[[R[74]],["u64"]],[[R[6]],["box",[R[6]]]]]],[11,R[5],E,R[108],11,[[[R[8]],[R[74]],["u64"],[R[1]]],[[R[6]],["box",[R[6]]]]]],[11,"new",E,"Creates a dense layer with given number of units and…",12,[[["u64"],[R[1]]],[[R[2]],["box",[R[2]]]]]],[11,R[5],E,"Creates a dense layer with the given parameters.",12,[[[R[8]],["u64"],[R[1]]],[[R[2]],["box",[R[2]]]]]],[11,"new",E,"Creates a dropout layer.",13,[[["f64"]],[["box",[R[62]]],[R[62]]]]],[11,"new",E,"Creates a 2D max pooling layer with the specified…",14,[[],[["box",[R[9]]],[R[9]]]]],[8,"Layer",E,"Public trait defining the behaviors of a layer.",N,N],[10,R[35],E,E,15,[[["self"],["dim4"]]]],[10,R[36],E,E,15,[[["self"],[R[78]]],[R[78]]]],[10,R[37],E,E,15,[[["self"],[R[78]]],[R[78]]]],[10,R[38],E,E,15,[[["self"],[R[78]]],[R[78]]]],[10,R[15],E,E,15,[[["self"]],["dim4"]]],[11,R[39],E,E,15,[[["self"]],[["vec",[R[78]]],[R[65],["vec"]]]]],[11,R[85],E,"Returns the parameters and their derivatives.",15,[[["self"]],[R[65]]]],[10,"save",E,E,15,[[["self"],[R[80]]],[R[19]]]],[11,R[86],E,E,15,[[["self"],[R[65],[R[79]]],[R[79]]]]],[11,"print",E,E,15,[[["self"]]]],[0,"losses","neuro","Loss functions.",N,N],[3,R[100],R[30],"Defines the binary cross entropy loss.",N,N],[3,R[101],E,"Defines the cross entropy loss.",N,N],[3,R[63],E,"Defines the mean absolute error loss (MAE).",N,N],[3,R[64],E,"Defines the mean squared error loss (MSE).",N,N],[3,R[102],E,"Applies the softmax function on the input and then…",N,N],[8,"Loss",E,"Defines the behaviors of a loss function.",N,N],[10,"id",E,"Returns a unique identifier.",16,[[["self"]],["u64"]]],[10,"eval",E,"Computes the value of the loss function.",16,[[["self"],[R[78]]],[R[104]]]],[10,"grad",E,"Computes the gradient of the loss function.",16,[[["self"],[R[78]]],[R[78]]]],[0,"metrics","neuro","Metrics used to assess the performance of the neural…",N,N],[4,"Metrics",R[69],"Declaration of the metrics.",N,N],[13,"Accuracy",E,E,17,N],[13,"FScore",E,E,17,N],[13,"LogLoss",E,E,17,N],[13,R[63],E,E,17,N],[13,R[64],E,E,17,N],[13,"RSquared",E,E,17,N],[0,"models","neuro","Base module to create neural networks.",N,N],[3,"Network",R[29],"Structure representing a neural network.",N,N],[11,"new",E,"Creates an empty neural network.",18,[[[R[79]],["o"],[R[65],[R[79]]],["d"],["l"]],["network"]]],[11,"add",E,"Adds a layer to the network.",18,[[["self"],["layer"],["box",["layer"]]]]],[11,"fit",E,"Fits the neural network with the training data.",18,[[["self"],[R[65],["vec"]],["vec",["metrics"]],[R[65],["u64"]],["u64"]]]],[11,"evaluate",E,"Evaluates the model on the test set.",18,[[["self"],[R[65],["vec"]],["vec",["metrics"]]]]],[11,"predict",E,"Computes the output of the network for the given input.",18,[[["self"],[R[78]]],[R[78]]]],[11,"predict_class",E,"Predicts the class for the input.",18,[[["self"],[R[78]]],["vec"]]],[11,"save",E,"Saves the model.",18,[[["self"],["str"]],[R[19]]]],[0,"optimizers","neuro","Optimizers used to train the neural network.",N,N],[3,"SGD",R[31],"Stochastic Gradient Descent",N,N],[3,"Adam",E,"Adaptive moments estimation",N,N],[3,"RMSProp",E,"RMSProp",N,N],[3,R[113],E,R[113],N,N],[8,R[57],E,"Defines the trait that needs to be implemented by any…",N,N],[10,R[42],E,E,19,[[["self"],["layer"],["usize"]]]],[11,R[87],E,E,19,[[["self"]]]],[10,R[43],E,E,19,[[["self"],["vec"]]]],[10,"save",E,E,19,[[["self"],[R[80]]],[R[19]]]],[11,"new",E,"Creates a Stochastic Gradient Descent optimizer.",20,[[[R[104]]],["sgd"]]],[11,R[5],E,"Creates a Stochastic Gradient Descent optimizer with…",20,[[[R[104]]],["sgd"]]],[11,"new",E,"Creates an Adam optimizer.",21,[[[R[104]]],["adam"]]],[11,R[5],E,"Creates an Adam optimizer with the given parameters.",21,[[[R[104]]],["adam"]]],[11,"new",E,"Creates an RMSProp optimizer.",22,[[[R[104]]],["rmsprop"]]],[11,R[5],E,"Creates an RMSProp optimizer with the given parameters.",22,[[[R[104]]],["rmsprop"]]],[11,"new",E,"Creates an AdaDelta optimizer.",23,[[],[R[111]]]],[11,R[5],E,"Creates an AdaDelta optimizer with the given parameters.",23,[[[R[104]]],[R[111]]]],[0,"regularizers","neuro","Regularization methods.",N,N],[4,R[97],R[83],"Defines the regularization methods.",N,N],[13,"L1",E,"Absolute value regularization.",24,N],[13,"L2",E,"Squared norm regularization.",24,N],[0,R[78],"neuro","Wrapper around ArrayFire's array with additional helper…",N,N],[4,R[98],R[84],"Defines reduction methods.",N,N],[13,"SumBatches",E,E,25,N],[13,"MeanBatches",E,E,25,N],[6,"PrimitiveType",E,"This type is defined to easily change between f32 and f64…",N,N],[6,"Tensor",E,"Public type to hide ArrayFire from the user (so that they…",N,N],[6,"Dim",E,"Type alias for ArrayFire's Dim4.",N,N],[8,R[99],E,"Defines additional methods for the Tensor type.",N,N],[10,"ones",E,"Creates a tensor of ones.",26,[[["dim4"]],[R[78]]]],[10,"zeros",E,"Creates a tensor of zeros.",26,[[["dim4"]],[R[78]]]],[10,R[88],E,"Creates an empty tensor with no dimensions.",26,[[],[R[78]]]],[10,R[89],E,"Returns the number of samples in a batch.",26,[[["self"]],["u64"]]],[10,R[46],E,"Shuffles the last dimensions of two tensors.",26,[[[R[78]]]]],[10,R[90],E,"Shuffles the last dimensions of two tensors inplace.",26,[[[R[78]]]]],[10,R[91],E,"Creates a tensor with random entries drawn from a uniform…",26,[[["dim4"],[R[104]]],[R[78]]]],[10,R[92],E,"Creates a tensor with random entries drawn from a normal…",26,[[["dim4"],[R[104]]],[R[78]]]],[10,"reduce",E,"Reduces the tensor.",26,[[["self"],[R[93]]],[R[78]]]],[10,"flatten",E,"Reshapes the tensor such that each sample is…",26,[[["self"]],[R[78]]]],[10,R[94],E,"Reshapes the tensor inplace such that each sample is…",26,[[["self"]]]],[10,"reshape",E,"Reshapes the tensor to the given dimensions.",26,[[["self"],["dim4"]],[R[78]]]],[10,R[95],E,"Reshapes the tensor to the given dimensions inplace.",26,[[["self"],["dim4"]]]],[10,R[96],E,E,26,[[["self"]]]],[14,"assert_approx_eq","neuro","Asserts if two expressions are approximately equal.",N,N],[11,"into",R[16],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[18],E,E,0,[[[U]],[R[19]]]],[11,R[20],E,E,0,[[],[R[19]]]],[11,R[21],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[R[26]]]],[11,"vzip",E,E,0,[[],["v"]]],[11,"into",R[10],E,3,[[],[U]]],[11,"into_iter",E,E,3,[[],["i"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[18],E,E,3,[[[U]],[R[19]]]],[11,R[20],E,E,3,[[],[R[19]]]],[11,R[21],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[23],E,E,3,[[["self"]],[R[26]]]],[11,"par_bridge",E,E,3,[[],["iterbridge"]]],[11,"vzip",E,E,3,[[],["v"]]],[11,"progress_with",E,E,3,[[["progressbar"]],["progressbariter"]]],[11,R[81],E,E,4,[[["self"]],[R[82]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[18],E,E,4,[[[U]],[R[19]]]],[11,R[20],E,E,4,[[],[R[19]]]],[11,R[21],E,E,4,[[["self"]],[T]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[23],E,E,4,[[["self"]],[R[26]]]],[11,"vzip",E,E,4,[[],["v"]]],[11,R[81],E,E,5,[[["self"]],[R[82]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[18],E,E,5,[[[U]],[R[19]]]],[11,R[20],E,E,5,[[],[R[19]]]],[11,R[21],E,E,5,[[["self"]],[T]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[23],E,E,5,[[["self"]],[R[26]]]],[11,"vzip",E,E,5,[[],["v"]]],[11,R[81],E,E,1,[[["self"]],[R[82]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[18],E,E,1,[[[U]],[R[19]]]],[11,R[20],E,E,1,[[],[R[19]]]],[11,R[21],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[R[26]]]],[11,"vzip",E,E,1,[[],["v"]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[18],E,E,2,[[[U]],[R[19]]]],[11,R[20],E,E,2,[[],[R[19]]]],[11,R[21],E,E,2,[[["self"]],[T]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[23],E,E,2,[[["self"]],[R[26]]]],[11,"vzip",E,E,2,[[],["v"]]],[11,R[81],R[110],E,7,[[["self"]],[R[82]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[18],E,E,7,[[[U]],[R[19]]]],[11,R[20],E,E,7,[[],[R[19]]]],[11,R[21],E,E,7,[[["self"]],[T]]],[11,R[25],E,E,7,[[["self"]],[T]]],[11,R[23],E,E,7,[[["self"]],[R[26]]]],[11,"vzip",E,E,7,[[],["v"]]],[11,"into",R[107],E,8,[[],[U]]],[11,R[67],E,E,8,[[["self"]],[T]]],[11,R[68],E,E,8,[[["self"],[T]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[18],E,E,8,[[[U]],[R[19]]]],[11,R[20],E,E,8,[[],[R[19]]]],[11,R[21],E,E,8,[[["self"]],[T]]],[11,R[25],E,E,8,[[["self"]],[T]]],[11,R[23],E,E,8,[[["self"]],[R[26]]]],[11,"vzip",E,E,8,[[],["v"]]],[11,R[81],R[3],E,10,[[["self"]],[R[82]]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[18],E,E,10,[[[U]],[R[19]]]],[11,R[20],E,E,10,[[],[R[19]]]],[11,R[21],E,E,10,[[["self"]],[T]]],[11,R[25],E,E,10,[[["self"]],[T]]],[11,R[23],E,E,10,[[["self"]],[R[26]]]],[11,"vzip",E,E,10,[[],["v"]]],[11,R[81],E,E,11,[[["self"]],[R[82]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[18],E,E,11,[[[U]],[R[19]]]],[11,R[20],E,E,11,[[],[R[19]]]],[11,R[21],E,E,11,[[["self"]],[T]]],[11,R[25],E,E,11,[[["self"]],[T]]],[11,R[23],E,E,11,[[["self"]],[R[26]]]],[11,"vzip",E,E,11,[[],["v"]]],[11,R[81],E,E,12,[[["self"]],[R[82]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[18],E,E,12,[[[U]],[R[19]]]],[11,R[20],E,E,12,[[],[R[19]]]],[11,R[21],E,E,12,[[["self"]],[T]]],[11,R[25],E,E,12,[[["self"]],[T]]],[11,R[23],E,E,12,[[["self"]],[R[26]]]],[11,"vzip",E,E,12,[[],["v"]]],[11,R[81],E,E,13,[[["self"]],[R[82]]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[18],E,E,13,[[[U]],[R[19]]]],[11,R[20],E,E,13,[[],[R[19]]]],[11,R[21],E,E,13,[[["self"]],[T]]],[11,R[25],E,E,13,[[["self"]],[T]]],[11,R[23],E,E,13,[[["self"]],[R[26]]]],[11,"vzip",E,E,13,[[],["v"]]],[11,R[81],E,E,14,[[["self"]],[R[82]]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[18],E,E,14,[[[U]],[R[19]]]],[11,R[20],E,E,14,[[],[R[19]]]],[11,R[21],E,E,14,[[["self"]],[T]]],[11,R[25],E,E,14,[[["self"]],[T]]],[11,R[23],E,E,14,[[["self"]],[R[26]]]],[11,"vzip",E,E,14,[[],["v"]]],[11,"into",E,E,9,[[],[U]]],[11,R[67],E,E,9,[[["self"]],[T]]],[11,R[68],E,E,9,[[["self"],[T]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[18],E,E,9,[[[U]],[R[19]]]],[11,R[20],E,E,9,[[],[R[19]]]],[11,R[21],E,E,9,[[["self"]],[T]]],[11,R[25],E,E,9,[[["self"]],[T]]],[11,R[23],E,E,9,[[["self"]],[R[26]]]],[11,"vzip",E,E,9,[[],["v"]]],[11,"into",R[30],E,27,[[],[U]]],[11,R[67],E,E,27,[[["self"]],[T]]],[11,R[68],E,E,27,[[["self"],[T]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[18],E,E,27,[[[U]],[R[19]]]],[11,R[20],E,E,27,[[],[R[19]]]],[11,R[21],E,E,27,[[["self"]],[T]]],[11,R[25],E,E,27,[[["self"]],[T]]],[11,R[23],E,E,27,[[["self"]],[R[26]]]],[11,"vzip",E,E,27,[[],["v"]]],[11,"into",E,E,28,[[],[U]]],[11,R[67],E,E,28,[[["self"]],[T]]],[11,R[68],E,E,28,[[["self"],[T]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[18],E,E,28,[[[U]],[R[19]]]],[11,R[20],E,E,28,[[],[R[19]]]],[11,R[21],E,E,28,[[["self"]],[T]]],[11,R[25],E,E,28,[[["self"]],[T]]],[11,R[23],E,E,28,[[["self"]],[R[26]]]],[11,"vzip",E,E,28,[[],["v"]]],[11,"into",E,E,29,[[],[U]]],[11,R[67],E,E,29,[[["self"]],[T]]],[11,R[68],E,E,29,[[["self"],[T]]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[18],E,E,29,[[[U]],[R[19]]]],[11,R[20],E,E,29,[[],[R[19]]]],[11,R[21],E,E,29,[[["self"]],[T]]],[11,R[25],E,E,29,[[["self"]],[T]]],[11,R[23],E,E,29,[[["self"]],[R[26]]]],[11,"vzip",E,E,29,[[],["v"]]],[11,"into",E,E,30,[[],[U]]],[11,R[67],E,E,30,[[["self"]],[T]]],[11,R[68],E,E,30,[[["self"],[T]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[18],E,E,30,[[[U]],[R[19]]]],[11,R[20],E,E,30,[[],[R[19]]]],[11,R[21],E,E,30,[[["self"]],[T]]],[11,R[25],E,E,30,[[["self"]],[T]]],[11,R[23],E,E,30,[[["self"]],[R[26]]]],[11,"vzip",E,E,30,[[],["v"]]],[11,"into",E,E,31,[[],[U]]],[11,R[67],E,E,31,[[["self"]],[T]]],[11,R[68],E,E,31,[[["self"],[T]]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[18],E,E,31,[[[U]],[R[19]]]],[11,R[20],E,E,31,[[],[R[19]]]],[11,R[21],E,E,31,[[["self"]],[T]]],[11,R[25],E,E,31,[[["self"]],[T]]],[11,R[23],E,E,31,[[["self"]],[R[26]]]],[11,"vzip",E,E,31,[[],["v"]]],[11,"into",R[69],E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[18],E,E,17,[[[U]],[R[19]]]],[11,R[20],E,E,17,[[],[R[19]]]],[11,R[21],E,E,17,[[["self"]],[T]]],[11,R[25],E,E,17,[[["self"]],[T]]],[11,R[23],E,E,17,[[["self"]],[R[26]]]],[11,"vzip",E,E,17,[[],["v"]]],[11,R[81],R[29],E,18,[[["self"]],[R[82]]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[18],E,E,18,[[[U]],[R[19]]]],[11,R[20],E,E,18,[[],[R[19]]]],[11,R[21],E,E,18,[[["self"]],[T]]],[11,R[25],E,E,18,[[["self"]],[T]]],[11,R[23],E,E,18,[[["self"]],[R[26]]]],[11,"vzip",E,E,18,[[],["v"]]],[11,"into",R[31],E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[18],E,E,20,[[[U]],[R[19]]]],[11,R[20],E,E,20,[[],[R[19]]]],[11,R[21],E,E,20,[[["self"]],[T]]],[11,R[25],E,E,20,[[["self"]],[T]]],[11,R[23],E,E,20,[[["self"]],[R[26]]]],[11,"vzip",E,E,20,[[],["v"]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[18],E,E,21,[[[U]],[R[19]]]],[11,R[20],E,E,21,[[],[R[19]]]],[11,R[21],E,E,21,[[["self"]],[T]]],[11,R[25],E,E,21,[[["self"]],[T]]],[11,R[23],E,E,21,[[["self"]],[R[26]]]],[11,"vzip",E,E,21,[[],["v"]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[18],E,E,22,[[[U]],[R[19]]]],[11,R[20],E,E,22,[[],[R[19]]]],[11,R[21],E,E,22,[[["self"]],[T]]],[11,R[25],E,E,22,[[["self"]],[T]]],[11,R[23],E,E,22,[[["self"]],[R[26]]]],[11,"vzip",E,E,22,[[],["v"]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[18],E,E,23,[[[U]],[R[19]]]],[11,R[20],E,E,23,[[],[R[19]]]],[11,R[21],E,E,23,[[["self"]],[T]]],[11,R[25],E,E,23,[[["self"]],[T]]],[11,R[23],E,E,23,[[["self"]],[R[26]]]],[11,"vzip",E,E,23,[[],["v"]]],[11,"into",R[83],E,24,[[],[U]]],[11,R[67],E,E,24,[[["self"]],[T]]],[11,R[68],E,E,24,[[["self"],[T]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[18],E,E,24,[[[U]],[R[19]]]],[11,R[20],E,E,24,[[],[R[19]]]],[11,R[21],E,E,24,[[["self"]],[T]]],[11,R[25],E,E,24,[[["self"]],[T]]],[11,R[23],E,E,24,[[["self"]],[R[26]]]],[11,"vzip",E,E,24,[[],["v"]]],[11,"into",R[84],E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[18],E,E,25,[[[U]],[R[19]]]],[11,R[20],E,E,25,[[],[R[19]]]],[11,R[21],E,E,25,[[["self"]],[T]]],[11,R[25],E,E,25,[[["self"]],[T]]],[11,R[23],E,E,25,[[["self"]],[R[26]]]],[11,"vzip",E,E,25,[[],["v"]]],[11,R[44],R[10],E,4,[[["self"]],["dim4"]]],[11,R[15],E,E,4,[[["self"]],["dim4"]]],[11,R[45],E,E,4,[[["self"]],["u64"]]],[11,R[105],E,E,4,[[["self"]],["u64"]]],[11,"classes",E,E,4,[[["self"]],[["vec",[R[82]]],[R[65],["vec"]]]]],[11,R[47],E,E,4,[[["self"]],[R[78]]]],[11,R[48],E,E,4,[[["self"]],[R[78]]]],[11,R[49],E,E,4,[[["self"]],[R[78]]]],[11,R[50],E,E,4,[[["self"]],[R[78]]]],[11,"x_test",E,E,4,[[["self"]],[[R[65],[R[78]]],[R[78]]]]],[11,"y_test",E,E,4,[[["self"]],[[R[65],[R[78]]],[R[78]]]]],[11,R[70],E,E,4,[[["self"]],[R[65]]]],[11,R[71],E,E,4,[[["self"]],[R[65]]]],[11,R[44],E,E,5,[[["self"]],["dim4"]]],[11,R[15],E,E,5,[[["self"]],["dim4"]]],[11,R[45],E,E,5,[[["self"]],["u64"]]],[11,R[105],E,E,5,[[["self"]],["u64"]]],[11,R[47],E,E,5,[[["self"]],[R[78]]]],[11,R[48],E,E,5,[[["self"]],[R[78]]]],[11,R[49],E,E,5,[[["self"]],[R[78]]]],[11,R[50],E,E,5,[[["self"]],[R[78]]]],[11,"x_test",E,E,5,[[["self"]],[[R[65],[R[78]]],[R[78]]]]],[11,"y_test",E,E,5,[[["self"]],[[R[65],[R[78]]],[R[78]]]]],[11,R[70],E,E,5,[[["self"]],[R[65]]]],[11,R[71],E,E,5,[[["self"]],[R[65]]]],[11,R[35],R[3],E,10,[[["self"],["dim4"]]]],[11,R[36],E,E,10,[[["self"],[R[78]]],[R[78]]]],[11,R[37],E,E,10,[[["self"],[R[78]]],[R[78]]]],[11,R[38],E,E,10,[[["self"],[R[78]]],[R[78]]]],[11,R[15],E,E,10,[[["self"]],["dim4"]]],[11,R[39],E,E,10,[[["self"]],[["vec",[R[78]]],[R[65],["vec"]]]]],[11,R[85],E,E,10,[[["self"]],[R[65]]]],[11,"save",E,E,10,[[["self"],[R[80]]],[R[19]]]],[11,R[35],E,E,11,[[["self"],["dim4"]]]],[11,R[36],E,E,11,[[["self"],[R[78]]],[R[78]]]],[11,R[37],E,E,11,[[["self"],[R[78]]],[R[78]]]],[11,R[38],E,E,11,[[["self"],[R[78]]],[R[78]]]],[11,R[15],E,E,11,[[["self"]],["dim4"]]],[11,R[39],E,E,11,[[["self"]],[["vec",[R[78]]],[R[65],["vec"]]]]],[11,R[85],E,E,11,[[["self"]],[R[65]]]],[11,"save",E,E,11,[[["self"],[R[80]]],[R[19]]]],[11,R[86],E,E,11,[[["self"],[R[65],[R[79]]],[R[79]]]]],[11,R[35],E,E,12,[[["self"],["dim4"]]]],[11,R[36],E,E,12,[[["self"],[R[78]]],[R[78]]]],[11,R[37],E,E,12,[[["self"],[R[78]]],[R[78]]]],[11,R[38],E,E,12,[[["self"],[R[78]]],[R[78]]]],[11,R[15],E,E,12,[[["self"]],["dim4"]]],[11,R[39],E,E,12,[[["self"]],[["vec",[R[78]]],[R[65],["vec"]]]]],[11,R[85],E,E,12,[[["self"]],[R[65]]]],[11,"save",E,E,12,[[["self"],[R[80]]],[R[19]]]],[11,R[86],E,E,12,[[["self"],[R[65],[R[79]]],[R[79]]]]],[11,"print",E,E,12,[[["self"]]]],[11,R[35],E,E,13,[[["self"],["dim4"]]]],[11,R[36],E,E,13,[[["self"],[R[78]]],[R[78]]]],[11,R[37],E,E,13,[[["self"],[R[78]]],[R[78]]]],[11,R[38],E,E,13,[[["self"],[R[78]]],[R[78]]]],[11,R[15],E,E,13,[[["self"]],["dim4"]]],[11,"save",E,E,13,[[["self"],[R[80]]],[R[19]]]],[11,R[35],E,E,14,[[["self"],["dim4"]]]],[11,R[36],E,E,14,[[["self"],[R[78]]],[R[78]]]],[11,R[37],E,E,14,[[["self"],[R[78]]],[R[78]]]],[11,R[38],E,E,14,[[["self"],[R[78]]],[R[78]]]],[11,R[15],E,E,14,[[["self"]],["dim4"]]],[11,"save",E,E,14,[[["self"],[R[80]]],[R[19]]]],[11,"id",R[30],E,27,[[["self"]],["u64"]]],[11,"eval",E,E,27,[[["self"],[R[78]]],[R[104]]]],[11,"grad",E,E,27,[[["self"],[R[78]]],[R[78]]]],[11,"id",E,E,28,[[["self"]],["u64"]]],[11,"eval",E,E,28,[[["self"],[R[78]]],[R[104]]]],[11,"grad",E,E,28,[[["self"],[R[78]]],[R[78]]]],[11,"id",E,E,29,[[["self"]],["u64"]]],[11,"eval",E,E,29,[[["self"],[R[78]]],[R[104]]]],[11,"grad",E,E,29,[[["self"],[R[78]]],[R[78]]]],[11,"id",E,E,30,[[["self"]],["u64"]]],[11,"eval",E,E,30,[[["self"],[R[78]]],[R[104]]]],[11,"grad",E,E,30,[[["self"],[R[78]]],[R[78]]]],[11,"id",E,E,31,[[["self"]],["u64"]]],[11,"eval",E,E,31,[[["self"],[R[78]]],[R[104]]]],[11,"grad",E,E,31,[[["self"],[R[78]]],[R[78]]]],[11,R[42],R[31],E,20,[[["self"],["layer"],["usize"]]]],[11,R[43],E,E,20,[[["self"],["vec"]]]],[11,"save",E,E,20,[[["self"],[R[80]]],[R[19]]]],[11,R[42],E,E,21,[[["self"],["layer"],["usize"]]]],[11,R[87],E,E,21,[[["self"]]]],[11,R[43],E,E,21,[[["self"],["vec"]]]],[11,"save",E,E,21,[[["self"],[R[80]]],[R[19]]]],[11,R[42],E,E,22,[[["self"],["layer"],["usize"]]]],[11,R[43],E,E,22,[[["self"],["vec"]]]],[11,"save",E,E,22,[[["self"],[R[80]]],[R[19]]]],[11,R[42],E,E,23,[[["self"],["layer"],["usize"]]]],[11,R[43],E,E,23,[[["self"],["vec"]]]],[11,"save",E,E,23,[[["self"],[R[80]]],[R[19]]]],[11,"ones","neuro",E,32,[[["dim4"]],[R[78]]]],[11,"zeros",E,E,32,[[["dim4"]],[R[78]]]],[11,R[88],E,E,32,[[],[R[78]]]],[11,R[89],E,E,32,[[["self"]],["u64"]]],[11,R[46],E,E,32,[[[R[78]]]]],[11,R[90],E,E,32,[[[R[78]]]]],[11,R[91],E,E,32,[[["dim4"],[R[104]]],[R[78]]]],[11,R[92],E,E,32,[[["dim4"],[R[104]]],[R[78]]]],[11,"reduce",E,E,32,[[["self"],[R[93]]],[R[78]]]],[11,"flatten",E,E,32,[[["self"]],[R[78]]]],[11,R[94],E,E,32,[[["self"]]]],[11,"reshape",E,E,32,[[["self"],["dim4"]],[R[78]]]],[11,R[95],E,E,32,[[["self"],["dim4"]]]],[11,R[96],E,E,32,[[["self"]]]],[11,"default",R[31],E,23,[[],[R[111]]]],[11,"clone",R[107],E,8,[[["self"]],[R[8]]]],[11,"clone",R[3],E,9,[[["self"]],[R[74]]]],[11,"clone",R[30],E,27,[[["self"]],["binarycrossentropy"]]],[11,"clone",E,E,28,[[["self"]],["crossentropy"]]],[11,"clone",E,E,29,[[["self"]],["meanabsoluteerror"]]],[11,"clone",E,E,30,[[["self"]],["meansquarederror"]]],[11,"clone",E,E,31,[[["self"]],["softmaxcrossentropy"]]],[11,"clone",R[83],E,24,[[["self"]],[R[79]]]],[11,"eq",R[3],E,9,[[["self"],[R[74]]],["bool"]]],[11,"from",R[10],E,1,[[["error"]],[R[11]]]],[11,"from",R[110],E,7,[[[R[11]]],[R[109]]]],[11,"next",R[10],E,3,[[["self"]],[R[65]]]],[11,"fmt",E,E,4,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",E,E,5,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",E,E,1,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",R[110],E,7,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",R[3],E,10,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",E,E,11,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",E,E,12,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",E,E,13,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",E,E,14,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",R[29],E,18,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",R[16],E,0,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",R[10],E,1,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",E,E,2,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",R[110],E,7,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",R[107],E,8,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",R[3],E,9,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",R[30],E,27,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",E,E,28,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",E,E,29,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",E,E,30,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",E,E,31,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",R[69],E,17,[[["self"],[R[51]]],[R[19]]]],[11,"fmt",R[83],E,24,[[["self"],[R[51]]],[R[19]]]]],"p":[[4,R[52]],[4,R[58]],[4,"Scaling"],[3,R[59]],[3,R[61]],[3,R[60]],[8,"DataSet"],[4,R[112]],[4,R[56]],[4,"Padding"],[3,R[53]],[3,"Conv2D"],[3,"Dense"],[3,R[75]],[3,R[55]],[8,"Layer"],[8,"Loss"],[4,"Metrics"],[3,"Network"],[8,R[57]],[3,"SGD"],[3,"Adam"],[3,"RMSProp"],[3,R[113]],[4,R[97]],[4,R[98]],[8,R[99]],[3,R[100]],[3,R[101]],[3,R[63]],[3,R[64]],[3,R[102]],[6,"Tensor"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
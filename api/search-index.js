var searchIndex={};
searchIndex["neuro"] = {"doc":"Neuro","i":[[0,"activations","neuro","Activation functions.",null,null],[4,"Activation","neuro::activations","Enumeration of the activation functions.",null,null],[13,"LeakyReLU","","",0,null],[13,"Linear","","",0,null],[13,"ReLU","","",0,null],[13,"Sigmoid","","",0,null],[13,"Softmax","","",0,null],[13,"Tanh","","",0,null],[11,"eval","","",0,[[["tensor"]],["tensor"]]],[0,"data","neuro","Simple interfaces to import data.",null,null],[3,"ImageDataSet","neuro::data","Structure representing a collection of images.",null,null],[3,"ImageDataSetBuilder","","",null,null],[3,"ImageOps","","Contains the parameters of the different operations…",null,null],[3,"TabularDataSet","","Structure representing tabular data.",null,null],[4,"DataSetError","","Errors that may be raised by data sets methods.",null,null],[13,"Io","","",1,null],[13,"Csv","","",1,null],[13,"DimensionMismatch","","",1,null],[13,"PathDoesNotExist","","",1,null],[13,"TrainPathDoesNotExist","","",1,null],[13,"ValidPathDoesNotExist","","",1,null],[13,"ImageFormatNotSupported","","",1,null],[13,"InvalidImagePath","","",1,null],[13,"InvalidValidationFraction","","",1,null],[13,"DifferentNumbersOfChannels","","",1,null],[4,"Scaling","","Defines the type of scaling that has been performed.",null,null],[13,"Normalized","","",2,null],[13,"Standarized","","",2,null],[11,"from_dir","","Constructs an ImageDataSet from a directory tree.",3,[[["option",["f64"]],["imageops"],["path"],["f64"],["bool"]],[["imagedataset"],["error"],["result",["imagedataset","error"]]]]],[11,"print_classes","","Prints the classes in the dataset.",3,[[["self"]]]],[11,"load_image","","Loads a single image from a path.",3,[[["path"],["imageops"]],[["result",["dataseterror"]],["dataseterror"]]]],[11,"load_image_vec","","Loads the images from the paths.",3,[[["imageops"]],[["error"],["result",["tensor","error"]],["tensor"]]]],[11,"image_ops","","",3,[[["self"]],["imageops"]]],[11,"new","","Creates a new image operations structure.",4,[[["primitivetype"],["option",["f64"]],["f64"],["option",["primitivetype"]],["option"]],["imageops"]]],[11,"from_dir","","Creates a dataset builder from a directory tree.",5,[[["path"]],["imagedatasetbuilder"]]],[11,"build","","Builds an ImageDataSet from the image dataset builder.",5,[[],[["imagedataset"],["error"],["result",["imagedataset","error"]]]]],[11,"hflip","","Flips the images horizontally with the given probability.",5,[[["f64"]],["imagedatasetbuilder"]]],[11,"vflip","","Flips the images vertically with the given probability.",5,[[["f64"]],["imagedatasetbuilder"]]],[11,"one_hot_encode","","One hot encodes the labels.",5,[[],["imagedatasetbuilder"]]],[11,"rotate","","Rotates the images by an angle drawn from a uniform…",5,[[["f64"],["i32"]],["imagedatasetbuilder"]]],[11,"valid_split","","Splits the data into a training and validation sets.",5,[[["f64"]],["imagedatasetbuilder"]]],[11,"scale","","Scales the images by multiplying each pixel by the given…",5,[[["primitivetype"]],["imagedatasetbuilder"]]],[11,"from_csv","","Creates a TabularDataSet from a set of csv files.",6,[[["path"],["f64"],["bool"]],[["tabulardataset"],["error"],["result",["tabulardataset","error"]]]]],[11,"from_tensor","","Creates a TabularDataSet from Tensors.",6,[[["option",["tensor"]],["tensor"]],[["tabulardataset"],["error"],["result",["tabulardataset","error"]]]]],[11,"normalize_input","","Normalizes the features of the training, validation, and…",6,[[["self"]]]],[11,"standardize_input","","Standardizes the features of the training, validation, and…",6,[[["self"]]]],[11,"normalize_output","","Normalizes the labels of the training, validation, and…",6,[[["self"]]]],[11,"standardize_output","","Standardizes the labels of the training, validation, and…",6,[[["self"]]]],[8,"DataSet","","Trait that must be implemented for any type of dataset…",null,null],[10,"input_shape","","Returns the dimension of the samples.",7,[[["self"]],["dim"]]],[10,"output_shape","","Returns the dimension of the labels.",7,[[["self"]],["dim"]]],[10,"num_train_samples","","Returns the number of samples in the training set.",7,[[["self"]],["u64"]]],[10,"num_valid_samples","","Returns the number of samples in the validation set.",7,[[["self"]],["u64"]]],[11,"classes","","Returns the classes in the data set.",7,[[["self"]],[["vec",["string"]],["option",["vec"]]]]],[10,"x_train","","Returns a reference to the training samples.",7,[[["self"]],["tensor"]]],[10,"y_train","","Returns a reference to the training labels.",7,[[["self"]],["tensor"]]],[10,"x_valid","","Returns a reference to the validation samples.",7,[[["self"]],[["option",["tensor"]],["tensor"]]]],[10,"y_valid","","Returns a reference to the validation labels.",7,[[["self"]],[["option",["tensor"]],["tensor"]]]],[10,"x_test","","Returns a reference to the test samples.",7,[[["self"]],[["option",["tensor"]],["tensor"]]]],[10,"y_test","","Returns a reference to the test labels.",7,[[["self"]],[["option",["tensor"]],["tensor"]]]],[10,"x_train_stats","","Returns a reference to the type of scaling that has been…",7,[[["self"]],["option"]]],[10,"y_train_stats","","Returns a reference to the type of scaling that has been…",7,[[["self"]],["option"]]],[0,"errors","neuro","Errors that may be returned by methods in the crate.",null,null],[4,"Error","neuro::errors","",null,null],[13,"DataSetError","","",8,null],[13,"HDF5Error","","",8,null],[13,"InvalidInputShape","","",8,null],[13,"InvalidOutputShape","","",8,null],[13,"NoLayer","","",8,null],[13,"UnknownLayer","","",8,null],[13,"UnknownOptimizer","","",8,null],[0,"initializers","neuro","Parameters initialization methods.",null,null],[4,"Initializer","neuro::initializers","Used to generate the initial values for the parameters of…",null,null],[13,"Constant","","Given constant value.",9,null],[13,"GlorotNormal","","Normal distribution scaled using Glorot scale factor.",9,null],[13,"GlorotUniform","","Uniform distribution scaled using Glorot scale factor.",9,null],[13,"HeNormal","","Normal distribution scaled using He scale factor.",9,null],[13,"HeUniform","","Uniform distribution scaled using He scale factor.",9,null],[13,"LecunNormal","","Normal distribution scaled using Lecun scale factor.",9,null],[13,"LecunUniform","","Uniform distribution scaled using Lecun scale factor.",9,null],[13,"Normal","","Normal distribution with mean 0 and standard deviation 0.01.",9,null],[13,"NormalScaled","","Normal distribution with given mean and standard deviation.",9,null],[13,"Ones","","Ones.",9,null],[13,"Uniform","","Uniform distribution within -0.01 and 0.01.",9,null],[13,"UniformBounded","","Uniform distribution within the given bounds.",9,null],[13,"Zeros","","Zeros.",9,null],[0,"layers","neuro","Collection of layers used to create neural networks.",null,null],[3,"BatchNorm","neuro::layers","Defines a batch normalization layer.",null,null],[3,"Conv2D","","Defines a 2D convolution layer.",null,null],[3,"Dense","","Defines a dense (or fully connected) layer.",null,null],[3,"Dropout","","Defines a dropout layer.",null,null],[3,"Flatten","","",null,null],[3,"MaxPool2D","","Defines a 2D max pooling layer.",null,null],[4,"Padding","","Defines the type of padding applied to the inputs.",null,null],[13,"Same","","",10,null],[13,"Valid","","",10,null],[11,"new","","Creates a batch normalization layer.",11,[[],[["box",["batchnorm"]],["batchnorm"]]]],[11,"with_param","","Creates a batch normalization layers with the given…",11,[[["primitivetype"]],[["box",["batchnorm"]],["batchnorm"]]]],[11,"mean","","Returns the current estimate of the dataset mean.",11,[[["self"]],["tensor"]]],[11,"variance","","Returns the current estimate of the dataset variance.",11,[[["self"]],["tensor"]]],[11,"new","","Creates a 2D convolution layer with the given parameters.",12,[[["u64"],["padding"]],[["box",["conv2d"]],["conv2d"]]]],[11,"with_param","","Creates a 2D convolution layer with the given parameters.",12,[[["initializer"],["activation"],["u64"],["padding"]],[["box",["conv2d"]],["conv2d"]]]],[11,"new","","Creates a dense layer with given number of units and…",13,[[["activation"],["u64"]],[["dense"],["box",["dense"]]]]],[11,"with_param","","Creates a dense layer with the given parameters.",13,[[["activation"],["u64"],["initializer"]],[["dense"],["box",["dense"]]]]],[11,"new","","Creates a dropout layer.",14,[[["f64"]],[["box",["dropout"]],["dropout"]]]],[11,"new","","",15,[[],[["flatten"],["box",["flatten"]]]]],[11,"new","","Creates a 2D max pooling layer.",16,[[],[["box",["maxpool2d"]],["maxpool2d"]]]],[11,"with_param","","Creates a 2D max pooling layer with the specified…",16,[[],[["box",["maxpool2d"]],["maxpool2d"]]]],[8,"Layer","","Public trait defining the behaviors of a layer.",null,null],[10,"name","","Returns the name of the layer.",17,[[["self"]],["str"]]],[10,"initialize_parameters","","Initializes the parameters of the layer.",17,[[["dim4"],["self"]]]],[10,"compute_activation","","Computes the activation of the layer during the forward…",17,[[["self"],["tensor"]],["tensor"]]],[10,"compute_activation_mut","","Computes the forward pass and stores intermediate values…",17,[[["self"],["tensor"]],["tensor"]]],[10,"compute_dactivation_mut","","Computes the backward pass through the layer.",17,[[["self"],["tensor"]],["tensor"]]],[10,"output_shape","","Returns the shape of the output.",17,[[["self"]],["dim"]]],[11,"parameters","","Returns the trainable parameters of the layer.",17,[[["self"]],[["option",["vec"]],["vec",["tensor"]]]]],[11,"parameters_mut","","Returns the trainable parameters of the layer and their…",17,[[["self"]],["option"]]],[10,"save","","Writes the parameters of the layer in the HDF5 group.",17,[[["group"],["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"set_regularizer","","Sets the regularizer for the layer.",17,[[["self"],["regularizer"],["option",["regularizer"]]]]],[11,"print","","Displays the properties of the layer.",17,[[["self"]]]],[0,"losses","neuro","Loss functions.",null,null],[3,"BinaryCrossEntropy","neuro::losses","",null,null],[3,"CrossEntropy","","",null,null],[3,"MeanAbsoluteError","","",null,null],[3,"MeanSquaredError","","",null,null],[3,"SoftmaxCrossEntropy","","Applies the softmax function on the input and then…",null,null],[8,"Loss","","Defines the behaviors of a loss function.",null,null],[10,"id","","Returns a unique identifier.",18,[[["self"]],["u64"]]],[10,"eval","","Computes the value of the loss function from the predicted…",18,[[["self"],["tensor"]],["primitivetype"]]],[10,"grad","","Computes the gradient of the loss function from the…",18,[[["self"],["tensor"]],["tensor"]]],[0,"metrics","neuro","Metrics used to assess the performance of the neural…",null,null],[4,"Metrics","neuro::metrics","Declaration of the metrics.",null,null],[13,"Accuracy","","",19,null],[0,"models","neuro","Base module to create neural networks.",null,null],[3,"Network","neuro::models","Structure representing a neural network.",null,null],[11,"new","","Creates an empty neural network.",20,[[["dim"],["loss"],["optimizer"],["regularizer"],["option",["regularizer"]]],[["error"],["result",["network","error"]],["network"]]]],[11,"add","","Adds a layer to the network.",20,[[["self"],["layer"],["box",["layer"]]]]],[11,"fit","","Fits the neural network with the training data.",20,[[["vec",["metrics"]],["t"],["option",["vec"]],["self"],["u64"],["option",["u64"]]]]],[11,"evaluate","","Evaluates the model on the test set.",20,[[["t"],["option",["vec"]],["self"],["vec",["metrics"]]]]],[11,"predict","","Computes the output of the network for the given input.",20,[[["self"],["tensor"]],["tensor"]]],[11,"predict_class","","Predicts the class for the input.",20,[[["self"],["tensor"]],["vec"]]],[11,"save","","Saves the model in HDF5 format.",20,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"load","","Loads a model from a HDF5 file.",20,[[["str"]],[["error"],["result",["network","error"]],["network"]]]],[0,"optimizers","neuro","Optimizers used to train the neural network.",null,null],[3,"SGD","neuro::optimizers","Stochastic Gradient Descent",null,null],[3,"Adam","","Adaptive moments estimation",null,null],[3,"RMSProp","","RMSProp",null,null],[3,"AdaDelta","","AdaDelta",null,null],[8,"Optimizer","","Defines the trait that needs to be implemented by any…",null,null],[10,"name","","",21,[[["self"]],["str"]]],[10,"update_parameters","","",21,[[["self"],["usize"],["layer"]]]],[11,"update_time_step","","",21,[[["self"]]]],[10,"initialize_parameters","","",21,[[["self"],["vec"]]]],[10,"save","","",21,[[["file"],["self"]],[["result",["error"]],["error"]]]],[11,"new","","Creates a Stochastic Gradient Descent optimizer.",22,[[["primitivetype"]],["sgd"]]],[11,"with_param","","Creates a Stochastic Gradient Descent optimizer with…",22,[[["primitivetype"]],["sgd"]]],[11,"new","","Creates an Adam optimizer.",23,[[["primitivetype"]],["adam"]]],[11,"with_param","","Creates an Adam optimizer with the given parameters.",23,[[["primitivetype"]],["adam"]]],[11,"new","","Creates an RMSProp optimizer.",24,[[["primitivetype"]],["rmsprop"]]],[11,"with_param","","Creates an RMSProp optimizer with the given parameters.",24,[[["primitivetype"]],["rmsprop"]]],[11,"new","","Creates an AdaDelta optimizer.",25,[[],["adadelta"]]],[11,"with_param","","Creates an AdaDelta optimizer with the parameters.",25,[[["primitivetype"]],["adadelta"]]],[0,"regularizers","neuro","Regularization methods.",null,null],[4,"Regularizer","neuro::regularizers","Defines the regularization methods.",null,null],[13,"L1","","Absolute value regularization.",26,null],[13,"L2","","Squared norm regularization.",26,null],[0,"tensor","neuro","Wrapper around ArrayFire's array with additional helper…",null,null],[4,"Reduction","neuro::tensor","Defines reduction methods.",null,null],[13,"SumBatches","","",27,null],[13,"MeanBatches","","",27,null],[6,"PrimitiveType","","This type is defined to easily change between f32 and f64…",null,null],[6,"Tensor","","Type alias for ArrayFire's Array.",null,null],[6,"Dim","","Type alias for ArrayFire's Dim4.",null,null],[8,"TensorTrait","","Defines additional methods for the Tensor type.",null,null],[10,"ones","","Creates a tensor of ones with the given dimensions.",28,[[["dim4"]],["tensor"]]],[10,"zeros","","Creates a tensor of zeros with the given dimensions.",28,[[["dim4"]],["tensor"]]],[10,"new_empty_tensor","","Creates an empty tensor with no dimensions.",28,[[],["tensor"]]],[10,"batch_size","","Returns the number of samples in a batch.",28,[[["self"]],["u64"]]],[10,"shuffle","","Shuffles two vectors with identical indices permutation…",28,[[["tensor"]]]],[10,"shuffle_mut","","Shuffles two vectors with identical indices permutation…",28,[[["tensor"]]]],[10,"scaled_uniform","","Creates a tensor with the given dimensions where each…",28,[[["dim4"],["primitivetype"]],["tensor"]]],[10,"scaled_normal","","Creates a tensor with the given dimensions where each…",28,[[["dim4"],["primitivetype"]],["tensor"]]],[10,"reduce","","Reduces the tensor.",28,[[["reduction"],["self"]],["tensor"]]],[10,"flatten","","Reshapes the tensor such that each sample is…",28,[[["self"]],["tensor"]]],[10,"flatten_mut","","Reshapes the tensor inplace such that each sample is…",28,[[["self"]]]],[10,"reshape","","Reshapes the tensor to the given dimensions.",28,[[["dim4"],["self"]],["tensor"]]],[10,"reshape_mut","","Reshapes the tensor to the given dimensions inplace.",28,[[["dim4"],["self"]]]],[10,"print_tensor","","",28,[[["self"]]]],[14,"assert_approx_eq","neuro","Asserts if two expressions are approximately equal.",null,null],[11,"from","neuro::activations","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"type_descriptor","","",0,[[],["typedescriptor"]]],[11,"from","neuro::data","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","neuro::errors","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","neuro::initializers","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"vzip","","",9,[[],["v"]]],[11,"from","neuro::layers","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"vzip","","",11,[[],["v"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"vzip","","",13,[[],["v"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"vzip","","",14,[[],["v"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"vzip","","",15,[[],["v"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"vzip","","",16,[[],["v"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"vzip","","",10,[[],["v"]]],[11,"type_descriptor","","",10,[[],["typedescriptor"]]],[11,"from","neuro::losses","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"vzip","","",29,[[],["v"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"vzip","","",30,[[],["v"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"vzip","","",31,[[],["v"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"vzip","","",32,[[],["v"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"vzip","","",33,[[],["v"]]],[11,"from","neuro::metrics","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"vzip","","",19,[[],["v"]]],[11,"from","neuro::models","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"vzip","","",20,[[],["v"]]],[11,"from","neuro::optimizers","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"vzip","","",22,[[],["v"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"vzip","","",23,[[],["v"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"vzip","","",24,[[],["v"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"vzip","","",25,[[],["v"]]],[11,"from","neuro::regularizers","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"vzip","","",26,[[],["v"]]],[11,"from","neuro::tensor","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"vzip","","",27,[[],["v"]]],[11,"input_shape","neuro::data","",3,[[["self"]],["dim4"]]],[11,"output_shape","","",3,[[["self"]],["dim4"]]],[11,"num_train_samples","","",3,[[["self"]],["u64"]]],[11,"num_valid_samples","","",3,[[["self"]],["u64"]]],[11,"classes","","",3,[[["self"]],[["vec",["string"]],["option",["vec"]]]]],[11,"x_train","","",3,[[["self"]],["tensor"]]],[11,"y_train","","",3,[[["self"]],["tensor"]]],[11,"x_valid","","",3,[[["self"]],[["option",["tensor"]],["tensor"]]]],[11,"y_valid","","",3,[[["self"]],[["option",["tensor"]],["tensor"]]]],[11,"x_test","","",3,[[["self"]],[["option",["tensor"]],["tensor"]]]],[11,"y_test","","",3,[[["self"]],[["option",["tensor"]],["tensor"]]]],[11,"x_train_stats","","",3,[[["self"]],["option"]]],[11,"y_train_stats","","",3,[[["self"]],["option"]]],[11,"input_shape","","",6,[[["self"]],["dim4"]]],[11,"output_shape","","",6,[[["self"]],["dim4"]]],[11,"num_train_samples","","",6,[[["self"]],["u64"]]],[11,"num_valid_samples","","",6,[[["self"]],["u64"]]],[11,"x_train","","",6,[[["self"]],["tensor"]]],[11,"y_train","","",6,[[["self"]],["tensor"]]],[11,"x_valid","","",6,[[["self"]],[["option",["tensor"]],["tensor"]]]],[11,"y_valid","","",6,[[["self"]],[["option",["tensor"]],["tensor"]]]],[11,"x_test","","",6,[[["self"]],[["option",["tensor"]],["tensor"]]]],[11,"y_test","","",6,[[["self"]],[["option",["tensor"]],["tensor"]]]],[11,"x_train_stats","","",6,[[["self"]],["option"]]],[11,"y_train_stats","","",6,[[["self"]],["option"]]],[11,"name","neuro::layers","",11,[[["self"]],["str"]]],[11,"initialize_parameters","","",11,[[["dim4"],["self"]]]],[11,"compute_activation","","",11,[[["self"],["tensor"]],["tensor"]]],[11,"compute_activation_mut","","",11,[[["self"],["tensor"]],["tensor"]]],[11,"compute_dactivation_mut","","",11,[[["self"],["tensor"]],["tensor"]]],[11,"output_shape","","",11,[[["self"]],["dim4"]]],[11,"parameters","","",11,[[["self"]],[["option",["vec"]],["vec",["tensor"]]]]],[11,"parameters_mut","","",11,[[["self"]],["option"]]],[11,"save","","",11,[[["group"],["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"name","","",12,[[["self"]],["str"]]],[11,"initialize_parameters","","",12,[[["dim4"],["self"]]]],[11,"compute_activation","","",12,[[["self"],["tensor"]],["tensor"]]],[11,"compute_activation_mut","","",12,[[["self"],["tensor"]],["tensor"]]],[11,"compute_dactivation_mut","","",12,[[["self"],["tensor"]],["tensor"]]],[11,"output_shape","","",12,[[["self"]],["dim4"]]],[11,"parameters","","",12,[[["self"]],[["option",["vec"]],["vec",["tensor"]]]]],[11,"parameters_mut","","",12,[[["self"]],["option"]]],[11,"save","","",12,[[["group"],["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"set_regularizer","","",12,[[["self"],["regularizer"],["option",["regularizer"]]]]],[11,"name","","",13,[[["self"]],["str"]]],[11,"initialize_parameters","","",13,[[["dim"],["self"]]]],[11,"compute_activation","","",13,[[["self"],["tensor"]],["tensor"]]],[11,"compute_activation_mut","","",13,[[["self"],["tensor"]],["tensor"]]],[11,"compute_dactivation_mut","","",13,[[["self"],["tensor"]],["tensor"]]],[11,"output_shape","","",13,[[["self"]],["dim4"]]],[11,"parameters","","",13,[[["self"]],[["option",["vec"]],["vec",["tensor"]]]]],[11,"parameters_mut","","",13,[[["self"]],["option"]]],[11,"save","","",13,[[["group"],["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"set_regularizer","","",13,[[["self"],["regularizer"],["option",["regularizer"]]]]],[11,"print","","",13,[[["self"]]]],[11,"name","","",14,[[["self"]],["str"]]],[11,"initialize_parameters","","",14,[[["dim4"],["self"]]]],[11,"compute_activation","","",14,[[["self"],["tensor"]],["tensor"]]],[11,"compute_activation_mut","","",14,[[["self"],["tensor"]],["tensor"]]],[11,"compute_dactivation_mut","","",14,[[["self"],["tensor"]],["tensor"]]],[11,"output_shape","","",14,[[["self"]],["dim4"]]],[11,"save","","",14,[[["group"],["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"name","","",15,[[["self"]],["str"]]],[11,"initialize_parameters","","",15,[[["dim"],["self"]]]],[11,"compute_activation","","",15,[[["self"],["tensor"]],["tensor"]]],[11,"compute_activation_mut","","",15,[[["self"],["tensor"]],["tensor"]]],[11,"compute_dactivation_mut","","",15,[[["self"],["tensor"]],["tensor"]]],[11,"output_shape","","",15,[[["self"]],["dim"]]],[11,"save","","",15,[[["group"],["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"name","","",16,[[["self"]],["str"]]],[11,"initialize_parameters","","",16,[[["dim4"],["self"]]]],[11,"compute_activation","","",16,[[["self"],["tensor"]],["tensor"]]],[11,"compute_activation_mut","","",16,[[["self"],["tensor"]],["tensor"]]],[11,"compute_dactivation_mut","","",16,[[["self"],["tensor"]],["tensor"]]],[11,"output_shape","","",16,[[["self"]],["dim"]]],[11,"save","","",16,[[["group"],["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"id","neuro::losses","",29,[[["self"]],["u64"]]],[11,"eval","","",29,[[["self"],["tensor"]],["primitivetype"]]],[11,"grad","","",29,[[["self"],["tensor"]],["tensor"]]],[11,"id","","",30,[[["self"]],["u64"]]],[11,"eval","","",30,[[["self"],["tensor"]],["primitivetype"]]],[11,"grad","","",30,[[["self"],["tensor"]],["tensor"]]],[11,"id","","",31,[[["self"]],["u64"]]],[11,"eval","","",31,[[["self"],["tensor"]],["primitivetype"]]],[11,"grad","","",31,[[["self"],["tensor"]],["tensor"]]],[11,"id","","",32,[[["self"]],["u64"]]],[11,"eval","","",32,[[["self"],["tensor"]],["primitivetype"]]],[11,"grad","","",32,[[["self"],["tensor"]],["tensor"]]],[11,"id","","",33,[[["self"]],["u64"]]],[11,"eval","","",33,[[["self"],["tensor"]],["primitivetype"]]],[11,"grad","","",33,[[["self"],["tensor"]],["tensor"]]],[11,"name","neuro::optimizers","",22,[[["self"]],["str"]]],[11,"update_parameters","","",22,[[["self"],["usize"],["layer"]]]],[11,"initialize_parameters","","",22,[[["self"],["vec"]]]],[11,"save","","",22,[[["file"],["self"]],[["result",["error"]],["error"]]]],[11,"name","","",23,[[["self"]],["str"]]],[11,"update_parameters","","",23,[[["self"],["usize"],["layer"]]]],[11,"update_time_step","","",23,[[["self"]]]],[11,"initialize_parameters","","",23,[[["self"],["vec"]]]],[11,"save","","",23,[[["file"],["self"]],[["result",["error"]],["error"]]]],[11,"name","","",24,[[["self"]],["str"]]],[11,"update_parameters","","",24,[[["self"],["usize"],["layer"]]]],[11,"initialize_parameters","","",24,[[["self"],["vec"]]]],[11,"save","","",24,[[["file"],["self"]],[["result",["error"]],["error"]]]],[11,"name","","",25,[[["self"]],["str"]]],[11,"update_parameters","","",25,[[["self"],["usize"],["layer"]]]],[11,"initialize_parameters","","",25,[[["self"],["vec"]]]],[11,"save","","",25,[[["file"],["self"]],[["result",["error"]],["error"]]]],[11,"ones","neuro","",34,[[["dim4"]],["tensor"]]],[11,"zeros","","",34,[[["dim4"]],["tensor"]]],[11,"new_empty_tensor","","",34,[[],["tensor"]]],[11,"batch_size","","",34,[[["self"]],["u64"]]],[11,"shuffle","","",34,[[["tensor"]]]],[11,"shuffle_mut","","",34,[[["tensor"]]]],[11,"scaled_uniform","","",34,[[["dim4"],["primitivetype"]],["tensor"]]],[11,"scaled_normal","","",34,[[["dim4"],["primitivetype"]],["tensor"]]],[11,"reduce","","",34,[[["reduction"],["self"]],["tensor"]]],[11,"flatten","","",34,[[["self"]],["tensor"]]],[11,"flatten_mut","","",34,[[["self"]]]],[11,"reshape","","",34,[[["dim4"],["self"]],["tensor"]]],[11,"reshape_mut","","",34,[[["dim4"],["self"]]]],[11,"print_tensor","","",34,[[["self"]]]],[11,"from","neuro::data","",1,[[["error"]],["dataseterror"]]],[11,"from","neuro::errors","",8,[[["dataseterror"]],["error"]]],[11,"from","","",8,[[["error"]],["error"]]],[11,"clone","neuro::activations","",0,[[["self"]],["activation"]]],[11,"clone","neuro::data","",4,[[["self"]],["imageops"]]],[11,"clone","neuro::initializers","",9,[[["self"]],["initializer"]]],[11,"clone","neuro::layers","",10,[[["self"]],["padding"]]],[11,"clone","neuro::losses","",29,[[["self"]],["binarycrossentropy"]]],[11,"clone","","",30,[[["self"]],["crossentropy"]]],[11,"clone","","",31,[[["self"]],["meanabsoluteerror"]]],[11,"clone","","",32,[[["self"]],["meansquarederror"]]],[11,"clone","","",33,[[["self"]],["softmaxcrossentropy"]]],[11,"clone","neuro::regularizers","",26,[[["self"]],["regularizer"]]],[11,"default","neuro::data","",4,[[],["imageops"]]],[11,"default","neuro::optimizers","",25,[[],["adadelta"]]],[11,"eq","neuro::layers","",10,[[["self"],["padding"]],["bool"]]],[11,"fmt","neuro::activations","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","neuro::data","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","neuro::errors","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","neuro::initializers","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","neuro::layers","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","neuro::losses","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","neuro::metrics","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","neuro::regularizers","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","neuro::data","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","neuro::errors","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","neuro::layers","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","neuro::models","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","neuro::regularizers","",26,[[["formatter"],["self"]],["result"]]],[11,"try_from","neuro::activations","",0,[[["u8"]],["result"]]],[11,"try_from","neuro::layers","",10,[[["u8"]],["result"]]],[11,"type_descriptor","neuro::activations","",0,[[],["typedescriptor"]]],[11,"type_descriptor","neuro::layers","",10,[[],["typedescriptor"]]]],"p":[[4,"Activation"],[4,"DataSetError"],[4,"Scaling"],[3,"ImageDataSet"],[3,"ImageOps"],[3,"ImageDataSetBuilder"],[3,"TabularDataSet"],[8,"DataSet"],[4,"Error"],[4,"Initializer"],[4,"Padding"],[3,"BatchNorm"],[3,"Conv2D"],[3,"Dense"],[3,"Dropout"],[3,"Flatten"],[3,"MaxPool2D"],[8,"Layer"],[8,"Loss"],[4,"Metrics"],[3,"Network"],[8,"Optimizer"],[3,"SGD"],[3,"Adam"],[3,"RMSProp"],[3,"AdaDelta"],[4,"Regularizer"],[4,"Reduction"],[8,"TensorTrait"],[3,"BinaryCrossEntropy"],[3,"CrossEntropy"],[3,"MeanAbsoluteError"],[3,"MeanSquaredError"],[3,"SoftmaxCrossEntropy"],[6,"Tensor"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);